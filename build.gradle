plugins {
    id 'application'
    id 'java'
    id "org.owasp.dependencycheck" version "8.1.2"
    id "com.github.ben-manes.versions" version "0.46.0"
    id "org.sonarqube" version "4.0.0.2929"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

repositories {
    flatDir {
    	dirs 'lib'
    }

    mavenLocal()
    mavenCentral()

    maven {
        name = 'progbits'
        url = "https://archiva.progbits.com/coffer/repository/internal"
    }
}

tasks.distZip.enabled = false
tasks.distTar.enabled = false

application {
    applicationDefaultJvmArgs = ["-DCONFIG_FILE=../${project.name}-${project.findProperty("debugEnv")}.json", "-Dlog4j.configurationFile=file:${projectDir}/log4j2.yaml"]
    getMainClass().set(project.hasProperty("mainClass") ? project.getProperty("mainClass") : "NULL")
}

dependencies {
    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.7.0'

    implementation 'com.progbits.api:ApiCore:1.3.5'
    implementation 'com.progbits.jetty:JettyEmbedded:1.1.3'
    implementation 'com.progbits.jetty.router:JettyServletRouter:1.0.0'
}

clean {
    delete 'dist/'
}

test {
    useTestNG()

    systemProperty "CONFIG_FILE", "../${project.name}-${project.findProperty('debugEnv')}.json"
    systemProperty "log4j.configurationFile", "file:${projectDir}/log4j2.yaml"
}

project.configurations.implementation.setCanBeResolved(true)

jar {
    manifest {
        attributes(
        'Class-Path': configurations.implementation.collect { "lib/" + it.getName() }.join(' '),
        'Main-Class': "$mainClass"
        )
    }
}

tasks.register('getDeps', Copy) {
    from sourceSets.main.runtimeClasspath
    into "$buildDir/libs/lib/"
    
    include "*.jar"

    dependsOn 'build'
}

tasks.register('copySrcDist', Copy) {
    from 'src/dist/'
    into 'build/dist/'

    filter { line -> line.replaceAll('%%PROJECT_NAME%%', "${project.name}").replaceAll('%%DESCRIPTION%%', "${project.description}") }

    rename "default.service", "${rootProject.name}.service"

    dependsOn 'getDeps'
}

tasks.register('buildDist', Copy) {
    from 'build/libs/'
    into 'build/dist/'

    rename "${rootProject.name}-${version}.jar", "${rootProject.name}.jar"

    dependsOn 'copySrcDist'
}

tasks.register('distribution', Zip) {
    archiveFileName = "${rootProject.name}-${rootProject.version}.zip"
    destinationDirectory = layout.buildDirectory.dir('distributions')

    from layout.buildDirectory.dir("dist")
    dependsOn 'buildDist'
}